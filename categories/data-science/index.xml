<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Science on Thomas Tiveron</title>
    <link>http://tiveron.ca/categories/data-science/</link>
    <description>Recent content in Data Science on Thomas Tiveron</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>thomas@tiveron.ca (Thomas Tiveron)</managingEditor>
    <webMaster>thomas@tiveron.ca (Thomas Tiveron)</webMaster>
    <lastBuildDate>Sun, 11 Sep 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tiveron.ca/categories/data-science/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Should I Learn Julia?</title>
      <link>http://tiveron.ca/blog/should-i-learn-julia/</link>
      <pubDate>Sun, 11 Sep 2016 00:00:00 +0000</pubDate>
      <author>thomas@tiveron.ca (Thomas Tiveron)</author>
      <guid>http://tiveron.ca/blog/should-i-learn-julia/</guid>
      <description>

&lt;h3 id=&#34;why-julia-why-now&#34;&gt;Why Julia, Why Now?&lt;/h3&gt;

&lt;p&gt;Programming is a diverse field! You have people from all around the world, tackling every sort of problem imaginable with their computers. From web-developers, to mobile apps creators, from legacy code maintainers, to scientific computing mathematicians, many people need different features and different languages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://julialang.org/&#34; target=&#34;\_blank&#34; alt=&#34;Julialang Homepage&#34;&gt; Julia &lt;/a&gt; is a relatively young language, released in 2012, and was designed to meet the high-performance needs of numerical and scientific programming; while being a general-purpose programming language. Depending on what you are looking to build now or in the future Julia may just be the language for you!&lt;/p&gt;

&lt;h3 id=&#34;nassim-taleb-and-julia&#34;&gt;Nassim Taleb and Julia&lt;/h3&gt;

&lt;p&gt;For those of you who don&amp;rsquo;t know who &lt;a href=&#34;https://twitter.com/nntaleb&#34; target=&#34;\_blank&#34; alt=&#34;Nassim Taleb Twitter&#34;&gt; Nassim Taleb &lt;/a&gt; is just bear with me for a minute on this tangent.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But really if you haven&amp;rsquo;t heard of him you should check out some of his work &lt;a href=&#34;https://en.wikipedia.org/wiki/Nassim_Nicholas_Taleb&#34; target=&#34;\_blank&#34; alt=&#34;Nassim Taleb&#34;&gt; Wikipedia - Nassim Taleb&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of Nassim Taleb&amp;rsquo;s areas of expertise is in the field of risk management, and if you are going to undertake the commitment of learning a new programming language you should think a little bit about risk. While I do believe that you can&amp;rsquo;t really choose a &lt;em&gt;wrong&lt;/em&gt; programming language, depending on what you are trying to get your computer to do, some languages will make this task easier or at least more intuitive. Nassim Taleb often discusses a risk management technique he calls &amp;ldquo;the barbell strategy&amp;rdquo;. The barbell strategy was initially applied to investments. Many of you are probably familiar with a graph that looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;postimage&#34; src=&#34;../media/160911_RiskvReturn.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Many investors in search of a higher return, choose to be somewhere in the middle. They underestimate their risk exposure and end up going bust!&lt;/p&gt;

&lt;p&gt;The barbell strategy suggests, putting what you need at the left side of the chart, where you get a small and safe return. Then to increase your risk exposure, put some assets to the far right, where they &lt;em&gt;may&lt;/em&gt; get a large return, but if you lose them you will not be broke. You get the potential for some large returns on a portion of your assets, while you keep the assets you need safe.&lt;/p&gt;

&lt;h4 id=&#34;umm-i-thought-we-were-talking-about-julia&#34;&gt;Umm&amp;hellip; I Thought We Were Talking About Julia?&lt;/h4&gt;

&lt;p&gt;Yes! So my main programming language is C#. I consider C# to be a safe language with plenty of demand and a solid future (JavaScript would be another great example). With this in mind, I can invest time into learning Julia, with the goal of expanding my data science and numerical programming abilities. Sure there is R, or Python, or Scala, or some others, but I have decided that Julia offers a great potential (&lt;em&gt;return&lt;/em&gt;) and that now is a great time to start learning it. As Julia continues to grow and if it does become &lt;em&gt;the&lt;/em&gt; language for specific applications, I will have years of experience at that time.&lt;/p&gt;

&lt;p&gt;If you want to become a software developer today, should Julia be your first language? It is fairly safe to say no. BUT on the condition that you can handle most the programming challenges in your field already with a language that lets you share and work on code with others, then Julia would be a great skill to add to your toolkit!&lt;/p&gt;

&lt;p&gt;Stay tuned for more about getting started with Julia and my experience so far.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Thomas&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Should I Learn R or Python?</title>
      <link>http://tiveron.ca/blog/learning-R-or-Python/</link>
      <pubDate>Tue, 05 Jul 2016 21:16:38 -0400</pubDate>
      <author>thomas@tiveron.ca (Thomas Tiveron)</author>
      <guid>http://tiveron.ca/blog/learning-R-or-Python/</guid>
      <description>

&lt;h3 id=&#34;r-or-python-for-data-science&#34;&gt;R or Python for Data Science&lt;/h3&gt;

&lt;p&gt;So you want to be a data scientist, but are stuck on the first polarizing decision of learning R or Python&amp;hellip; I&amp;rsquo;m going to try to help you!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also going to attempt to not make this post follow the typical &amp;ldquo;R is maybe the best, or Python, or neither&amp;rdquo;, as I find these kind of articles informative, but not that helpful. If you are wanting a break down of R and Python&amp;rsquo;s strengths, ease of learning, salaries, etc. you can find soo many with Google, I&amp;rsquo;ll even save you the work of typing it in -  &lt;a href=&#34;https://www.google.com/?gfe_rd=cr&amp;amp;ei=IV98V8bMLYKN8Qf3vbOwBw#q=R+or+Python&#34; title=&#34;R or Python Google Search Results&#34;&gt;R or Python&lt;/a&gt;.
But while their infographics are detailed and interesting, reviewing them does not help you make the decision of which to start learning. So that is what I&amp;rsquo;ll try to do here, in just two simple questions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer : I&amp;rsquo;m neither an R nor a Python expert, but I think my little bit of experience with both can set you on the right path&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-do-have-a-data-set-and-a-problem-in-mind&#34;&gt;1. Do have a data set and a problem in mind?&lt;/h4&gt;

&lt;h5 id=&#34;yes-r&#34;&gt;Yes - R&lt;/h5&gt;

&lt;h5 id=&#34;no-python&#34;&gt;No - Python&lt;/h5&gt;

&lt;p&gt;I feel this question may split developers and academics (generalizing a lot here). Academics typically have a thesis, which is a set problem they are wanting to solve, and are looking to a data science language to beef-up what they might have tried to do in Excel. In contrast, developers, may be wanting to find work with a company and be looking to a data science language to add valuable insight to business data.
With these two needs in mind, I think the academic approaching a problem with a mathematical rigor could find R a great place to start, and the developer looking to hack together business data, could find Python great. Now obviously, I&amp;rsquo;m making some assumptions here, but if you can see yourself fitting into either camp, that would be my advice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;
&lt;br&gt;Choose R - If you have a dataset (sensorlogs.csv, or a database). You&amp;rsquo;re going be able to get up and running very quickly and answering questions with R.
&lt;br&gt;Choose Python - If you need to scrap a website, hack together program outputs, you may need the flexibility of Python to get things together.&lt;/p&gt;

&lt;h4 id=&#34;2-do-you-have-programming-experience&#34;&gt;2. Do you have programming experience?&lt;/h4&gt;

&lt;h5 id=&#34;yes-r-1&#34;&gt;Yes - R&lt;/h5&gt;

&lt;h5 id=&#34;no-python-1&#34;&gt;No - Python&lt;/h5&gt;

&lt;p&gt;This may seem a little reverse, but hear me out. The simple approach is to say if you have programming experience, you can learn Python quickly and be solving problems in no time; while learning R is an entirely new beast. However, I think that if you already know how to program, you can use that language to solve the parts of your problem which R would not be as strong at. For example, if you want to build an entire application and require some data analysis. You can build the application in your known language, then introduce R to crunch data as required. Now in contrast, if you have no programming experience, I think you should learn Python. The journey of learning will always open new and unforeseen doors. If a year from now you need to build a web service, you probably won&amp;rsquo;t get far with R there. Most people will not get a job where they are doing pure data science all the time. If you end up needing to develop something, you will probably need other tools. If you don&amp;rsquo;t have other tools, learn Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;
&lt;br&gt;Choose R - If you already have a working understanding of another programming language.
&lt;br&gt;Choose Python - If you have never programmed before, as you can do almost anything with it.&lt;/p&gt;

&lt;h4 id=&#34;the-choice-is-yours&#34;&gt;The Choice Is Yours&lt;/h4&gt;

&lt;p&gt;I tend to see R as a really fancy calculator, and I&amp;rsquo;m talking really fancy, fancier than even a &lt;a href=&#34;https://education.ti.com/en/us/products/calculators/graphing-calculators/ti-89-titanium/features/features-summary&#34; title=&#34;TI-89 Titanium&#34;&gt;Titanium TI-89&lt;/a&gt;. This isn&amp;rsquo;t meant to be an insult! On my desk I always have my calculator next to me (yes I know there is one on my computer), but my calculator is better because it is specialized. R could be the best choice for you if you have data, even dirty data. Even if you don&amp;rsquo;t have a clearly defined goal with that data, R has many great tools for exploring and visualizing that data.&lt;/p&gt;

&lt;p&gt;Now Python on the other hand, I see as good kitchen knife (where do I come up with these metaphors??). Sure there are specialized knives, pairing, steak, bread, etc. But for tackling the biggest variety of jobs, that kitch&amp;hellip; err Python is going to get the job done.&lt;/p&gt;

&lt;p&gt;So, to repeat myself like a broken record (I do similes too). If you have data, or get to work with just data choose R, especially if you already know a different programming language to handle any other development needs. If you don&amp;rsquo;t know any other programming language, or need to create something to generate your data choose Python.&lt;/p&gt;

&lt;p&gt;I know everyone won&amp;rsquo;t agree with me, and rightfully so. I also had to generalize a fair bit to try to draw a clear line between the two, but I hope I was able to help you. As always, if you have any further questions about my suggestions please reach out to me with any of the links below.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Thomas&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>